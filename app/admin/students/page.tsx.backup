"use client"

import { useState, useEffect } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table"
import { 
  Users, 
  UserPlus, 
  CreditCard, 
  TrendingUp, 
  Search,
  Mail,
  Phone,
  Calendar,
  DollarSign
} from "lucide-react"

interface Student {
  id: string
  name: string
  email: string
  phone?: string
  createdAt: string
  membership?: {
    id: string
    status: string
    plan: {
      name: string
      price: number
      currency: string
      type: string
    }
    startDate: string
    endDate: string
    nextBillingDate: string
  }
  payments?: {
    id: string
    amount: number
    currency: string
    status: string
    paidAt?: string
  }[]
}

interface StudentMetrics {
  totalStudents: number
  activeSubscriptions: number
  monthlyRevenue: number
  newStudentsThisMonth: number
}

export default function StudentsPage() {
  const [students, setStudents] = useState<Student[]>([])
  const [metrics, setMetrics] = useState<StudentMetrics>({
    totalStudents: 0,
    activeSubscriptions: 0,
    monthlyRevenue: 0,
    newStudentsThisMonth: 0
  })
  const [searchTerm, setSearchTerm] = useState("")
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    fetchStudents()
    fetchMetrics()
  }, [])

  const fetchStudents = async () => {
    try {
      const response = await fetch("/api/admin/students")
      if (response.ok) {
        const data = await response.json()
        setStudents(data.students || [])
      }
    } catch (error) {
      console.error("Error fetching students:", error)
    } finally {
      setLoading(false)
    }
  }

  const fetchMetrics = async () => {
    try {
      const response = await fetch("/api/admin/students/metrics")
      if (response.ok) {
        const data = await response.json()
        setMetrics(data)
      }
    } catch (error) {
      console.error("Error fetching metrics:", error)
    }
  }

  const filteredStudents = students.filter(student =>
    student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    student.email.toLowerCase().includes(searchTerm.toLowerCase())
  )

  const getStatusBadge = (status: string) => {
    const statusMap = {
      ACTIVE: { label: "Activo", variant: "default" as const },
      INACTIVE: { label: "Inactivo", variant: "secondary" as const },
      CANCELLED: { label: "Cancelado", variant: "destructive" as const },
      PENDING: { label: "Pendiente", variant: "outline" as const }
    }
    
    const statusInfo = statusMap[status as keyof typeof statusMap] || { label: status, variant: "outline" as const }
    return <Badge variant={statusInfo.variant}>{statusInfo.label}</Badge>
  }

  const formatCurrency = (amount: number, currency: string = "CLP") => {
    return new Intl.NumberFormat("es-CL", {
      style: "currency",
      currency: currency
    }).format(amount)
  }

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("es-CL")
  }

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Estudiantes</h1>
          <p className="text-muted-foreground">
            Gestiona los estudiantes de tu academia
          </p>
        </div>
        <Button>
          <UserPlus className="mr-2 h-4 w-4" />
          Agregar Estudiante
        </Button>
      </div>

      {/* Metrics Cards */}
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-4">
        <Card className="relative overflow-hidden bg-gradient-to-br from-blue-50 to-blue-100 dark:from-blue-950/50 dark:to-blue-900/30 border-blue-200 dark:border-blue-800">
          <div className="absolute top-0 right-0 w-20 h-20 bg-blue-500/10 rounded-full -translate-y-10 translate-x-10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-blue-900 dark:text-blue-100">Total Estudiantes</CardTitle>
            <div className="p-2 bg-blue-500/20 rounded-lg">
              <Users className="h-4 w-4 text-blue-600 dark:text-blue-400" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-blue-900 dark:text-blue-100">{metrics.totalStudents}</div>
            <p className="text-xs text-blue-600 dark:text-blue-300 mt-1">
              Estudiantes registrados
            </p>
          </CardContent>
        </Card>

        <Card className="relative overflow-hidden bg-gradient-to-br from-green-50 to-green-100 dark:from-green-950/50 dark:to-green-900/30 border-green-200 dark:border-green-800">
          <div className="absolute top-0 right-0 w-20 h-20 bg-green-500/10 rounded-full -translate-y-10 translate-x-10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-green-900 dark:text-green-100">Suscripciones Activas</CardTitle>
            <div className="p-2 bg-green-500/20 rounded-lg">
              <CreditCard className="h-4 w-4 text-green-600 dark:text-green-400" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-green-900 dark:text-green-100">{metrics.activeSubscriptions}</div>
            <p className="text-xs text-green-600 dark:text-green-300 mt-1">
              Pagos al día
            </p>
          </CardContent>
        </Card>

        <Card className="relative overflow-hidden bg-gradient-to-br from-purple-50 to-purple-100 dark:from-purple-950/50 dark:to-purple-900/30 border-purple-200 dark:border-purple-800">
          <div className="absolute top-0 right-0 w-20 h-20 bg-purple-500/10 rounded-full -translate-y-10 translate-x-10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-purple-900 dark:text-purple-100">Ingresos Mensuales</CardTitle>
            <div className="p-2 bg-purple-500/20 rounded-lg">
              <DollarSign className="h-4 w-4 text-purple-600 dark:text-purple-400" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-purple-900 dark:text-purple-100">
              {formatCurrency(metrics.monthlyRevenue)}
            </div>
            <p className="text-xs text-purple-600 dark:text-purple-300 mt-1">
              Recaudación mensual
            </p>
          </CardContent>
        </Card>

        <Card className="relative overflow-hidden bg-gradient-to-br from-orange-50 to-orange-100 dark:from-orange-950/50 dark:to-orange-900/30 border-orange-200 dark:border-orange-800">
          <div className="absolute top-0 right-0 w-20 h-20 bg-orange-500/10 rounded-full -translate-y-10 translate-x-10"></div>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium text-orange-900 dark:text-orange-100">Nuevos Este Mes</CardTitle>
            <div className="p-2 bg-orange-500/20 rounded-lg">
              <TrendingUp className="h-4 w-4 text-orange-600 dark:text-orange-400" />
            </div>
          </CardHeader>
          <CardContent>
            <div className="text-3xl font-bold text-orange-900 dark:text-orange-100">{metrics.newStudentsThisMonth}</div>
            <p className="text-xs text-orange-600 dark:text-orange-300 mt-1">
              Registros recientes
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Search and Filters */}
      <Card>
        <CardHeader>
          <CardTitle>Lista de Estudiantes</CardTitle>
          <CardDescription>
            Busca y gestiona todos los estudiantes de tu academia
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center space-x-2 mb-4">
            <Search className="h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Buscar por nombre o email..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="max-w-sm"
            />
          </div>

          {/* Students Table */}
          <div className="rounded-lg border border-border/50 overflow-hidden bg-card/50 backdrop-blur-sm">
            <Table>
              <TableHeader>
                <TableRow className="bg-muted/30 hover:bg-muted/50 border-border/50">
                  <TableHead className="font-semibold">Estudiante</TableHead>
                  <TableHead className="font-semibold">Plan</TableHead>
                  <TableHead className="font-semibold">Estado</TableHead>
                  <TableHead className="font-semibold">Próximo Pago</TableHead>
                  <TableHead className="font-semibold">Registro</TableHead>
                  <TableHead className="text-right font-semibold">Acciones</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredStudents.length === 0 ? (
                  <TableRow>
                    <TableCell colSpan={6} className="text-center py-12">
                      <div className="flex flex-col items-center space-y-4">
                        <div className="p-4 bg-muted/20 rounded-full">
                          <Users className="h-12 w-12 text-muted-foreground" />
                        </div>
                        <div className="space-y-2">
                          <p className="text-lg font-medium text-muted-foreground">
                            {searchTerm ? "No se encontraron estudiantes" : "No hay estudiantes registrados"}
                          </p>
                          {!searchTerm && (
                            <p className="text-sm text-muted-foreground">
                              Los estudiantes aparecerán aquí cuando se registren con un plan
                            </p>
                          )}
                        </div>
                      </div>
                    </TableCell>
                  </TableRow>
                ) : (
                  filteredStudents.map((student) => (
                    <TableRow key={student.id} className="hover:bg-muted/20 transition-colors border-border/30">
                      <TableCell className="py-4">
                        <div className="flex items-center space-x-3">
                          <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-sm">
                            {student.name.charAt(0).toUpperCase()}
                          </div>
                          <div className="space-y-1">
                            <div className="font-medium text-foreground">{student.name}</div>
                            <div className="flex items-center text-sm text-muted-foreground">
                              <Mail className="mr-1 h-3 w-3" />
                              {student.email}
                            </div>
                            {student.phone && (
                              <div className="flex items-center text-sm text-muted-foreground">
                                <Phone className="mr-1 h-3 w-3" />
                                {student.phone}
                              </div>
                            )}
                          </div>
                        </div>
                      </TableCell>
                      <TableCell className="py-4">
                        {student.membership ? (
                          <div className="space-y-1">
                            <div className="font-medium text-foreground">{student.membership.plan.name}</div>
                            <div className="text-sm text-muted-foreground">
                              {formatCurrency(student.membership.plan.price)} / {student.membership.plan.type === "MONTHLY" ? "mes" : "año"}
                            </div>
                          </div>
                        ) : (
                          <div className="flex items-center space-x-2">
                            <div className="w-2 h-2 bg-muted-foreground rounded-full"></div>
                            <span className="text-muted-foreground">Sin plan</span>
                          </div>
                        )}
                      </TableCell>
                      <TableCell className="py-4">
                        {student.membership ? (
                          getStatusBadge(student.membership.status)
                        ) : (
                          <Badge variant="outline" className="bg-muted/20">Sin suscripción</Badge>
                        )}
                      </TableCell>
                      <TableCell className="py-4">
                        {student.membership ? (
                          <div className="flex items-center text-sm text-foreground">
                            <Calendar className="mr-2 h-4 w-4 text-muted-foreground" />
                            {formatDate(student.membership.nextBillingDate)}
                          </div>
                        ) : (
                          <span className="text-muted-foreground">-</span>
                        )}
                      </TableCell>
                      <TableCell className="py-4">
                        <div className="text-sm text-muted-foreground">
                          {formatDate(student.createdAt)}
                        </div>
                      </TableCell>
                      <TableCell className="text-right py-4">
                        <Button variant="outline" size="sm" className="hover:bg-primary hover:text-primary-foreground transition-colors">
                          Ver Detalles
                        </Button>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
