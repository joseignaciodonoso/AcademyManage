// Registrations for events (special events require prior registration and possibly payment)
model EventRegistration {
  id           String           @id @default(cuid())
  academyId    String
  eventId      String
  userId       String
  status       EnrollmentStatus @default(ENROLLED) // reuse enum
  paidRequired Boolean          @default(false)
  checkedInAt  DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)
  event   Event   @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_registrations")
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// Branch ↔ Coach assignments
model BranchCoach {
  branchId  String
  coachId   String
  createdAt DateTime @default(now())

  branch Branch @relation(fields: [branchId], references: [id], onDelete: Cascade)
  coach  User   @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@id([branchId, coachId])
  @@map("branch_coaches")
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================
// Multi-tenant: Organizations
// ============================

enum OrganizationType {
  ACADEMY
  CLUB
  OTHER
}

model Organization {
  id        String           @id @default(cuid())
  name      String
  slug      String           @unique
  type      OrganizationType
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  settings OrganizationSettings?
  members  OrganizationMember[]
  teams    Team[]
  users    User[]
  events   Event[]

  @@map("organizations")
}

model OrganizationSettings {
  id             String @id @default(cuid())
  organizationId String @unique

  // Branding / Defaults (kept minimal for PR-1)
  currency  String @default("CLP")
  timezone  String @default("America/Santiago")
  taxRate   Float  @default(0.19)
  themeMode String @default("system") // light | dark | system

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("organization_settings")
}

model OrganizationMember {
  organizationId String
  userId         String
  role           UserRole @default(STUDENT)
  createdAt      DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([organizationId, userId])
  @@map("organization_members")
}

// Basic Team construct for Clubs (kept minimal for PR-1)
model Team {
  id             String   @id @default(cuid())
  organizationId String
  name           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@map("teams")
}

// Core Academy Management
model Academy {
  id         String           @id @default(cuid())
  name       String
  slug       String           @unique
  type       OrganizationType @default(ACADEMY) // ACADEMY or CLUB
  sport      SportType? // For CLUB: FOOTBALL or BASKETBALL
  discipline String? // e.g., "Jiu-Jitsu", "Karate", "Fútbol"
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Odoo Integration
  odooUrl      String?
  odooDb       String?
  odooClientId String?

  // Branding
  brandPrimary     String  @default("#000000")
  brandSecondary   String  @default("#666666")
  brandAccent      String  @default("#0066cc")
  brandNeutral     String  @default("#f5f5f5")
  brandBackground  String  @default("#ffffff")
  brandForeground  String  @default("#000000")
  logoUrl          String?
  logoDarkUrl      String?
  faviconUrl       String?
  ogImageUrl       String?
  defaultThemeMode String  @default("system") // light | dark | system

  // Business Settings
  currency   String  @default("CLP")
  timezone   String  @default("America/Santiago")
  dateFormat String  @default("DD/MM/YYYY")
  taxRate    Float   @default(0.19) // IVA Chile
  useUf      Boolean @default(false)

  // Onboarding
  onboardingCompleted Boolean @default(false)

  // Relations
  branches           Branch[]
  users              User[]
  plans              Plan[]
  memberships        Membership[]
  payments           Payment[]
  curricula          Curriculum[]
  contents           Content[]
  channels           Channel[]
  contentPermissions ContentPermission[]
  classes            Class[]
  classSchedules     ClassSchedule[]
  events             Event[]
  eventRegistrations EventRegistration[]
  auditLogs          AuditLog[]
  kpisCache          KpiCache[]

  // Club Deportivo relations
  trainingSessions  TrainingSession[]
  matches           Match[]
  expenses          ClubExpense[]
  announcements     Announcement[]
  tournaments       Tournament[]       @relation("AcademyTournaments")
  trainingSchedules TrainingSchedule[] @relation("AcademyTrainingSchedules")
  trainingInstances TrainingInstance[] @relation("AcademyTrainingInstances")

  @@map("academies")
}

model Branch {
  id        String   @id @default(cuid())
  academyId String
  name      String
  address   String
  phone     String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Operating Hours
  mondayOpen     String?
  mondayClose    String?
  tuesdayOpen    String?
  tuesdayClose   String?
  wednesdayOpen  String?
  wednesdayClose String?
  thursdayOpen   String?
  thursdayClose  String?
  fridayOpen     String?
  fridayClose    String?
  saturdayOpen   String?
  saturdayClose  String?
  sundayOpen     String?
  sundayClose    String?

  // Relations
  academy        Academy         @relation(fields: [academyId], references: [id], onDelete: Cascade)
  classes        Class[]
  events         Event[]
  enrollments    Enrollment[]
  coaches        BranchCoach[]
  classSchedules ClassSchedule[]

  @@map("branches")
}

// User Management & RBAC
enum UserRole {
  SUPER_ADMIN
  ACADEMY_ADMIN
  COACH
  STUDENT
  FINANCE
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model User {
  id        String     @id @default(cuid())
  academyId String?
  // Multi-tenant (PR-1): optional org reference retained alongside academyId for migration
  orgId     String?
  email     String     @unique
  name      String?
  phone     String?
  password  String?
  role      UserRole   @default(STUDENT)
  status    UserStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Student specific
  beltLevel        String?
  discipline       String?
  emergencyContact String?
  medicalNotes     String?

  // Odoo Integration
  odooPartnerId Int?

  // Relations
  academy                 Academy?             @relation(fields: [academyId], references: [id], onDelete: Cascade)
  organization            Organization?        @relation(fields: [orgId], references: [id], onDelete: SetNull)
  accounts                Account[]
  sessions                Session[]
  memberships             Membership[]
  enrollments             Enrollment[]
  attendances             Attendance[]
  assessments             Assessment[]
  payments                Payment[]
  eventRegistrations      EventRegistration[]
  auditLogs               AuditLog[]
  classesAsCoach          Class[]              @relation("ClassCoach")
  contentPermissions      ContentPermission[]
  branchesAsCoach         BranchCoach[]
  // Recurring schedules where this user is coach
  classSchedulesAsCoach   ClassSchedule[]      @relation("ClassScheduleCoach")
  // Multi-tenant memberships
  organizationMemberships OrganizationMember[]
  // Student progress tracking
  progress                StudentProgress[]

  // Club Deportivo relations
  playerProfile       PlayerProfile?
  guardianOf          PlayerProfile[]      @relation("GuardianOf")
  documents           PlayerDocument[]     @relation("PlayerDocuments")
  verifiedDocuments   PlayerDocument[]     @relation("VerifiedDocuments")
  trainingAttendance  TrainingAttendance[] @relation("TrainingAttendance")
  matchCallups        MatchCallupPlayer[]  @relation("MatchCallups")
  matchStats          MatchPlayerStat[]    @relation("MatchStats")
  evaluationsReceived PlayerEvaluation[]   @relation("EvaluatedPlayer")
  evaluationsGiven    PlayerEvaluation[]   @relation("EvaluatingCoach")
  expenses            ClubExpense[]        @relation("ClubExpenses")
  announcements       Announcement[]       @relation("Announcements")
  goals               PlayerGoal[]         @relation("PlayerGoals")
  badges              UserBadge[]          @relation("UserBadges")

  @@map("users")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Plans & Subscriptions
enum PlanType {
  MONTHLY
  QUARTERLY
  YEARLY
  UNLIMITED
}

enum PlanStatus {
  ACTIVE
  INACTIVE
  ARCHIVED
}

model Plan {
  id        String     @id @default(cuid())
  academyId String
  name      String
  slug      String
  type      PlanType
  status    PlanStatus @default(ACTIVE)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // Pricing
  price     Float
  currency  String @default("CLP")
  trialDays Int    @default(0)
  setupFee  Float  @default(0)

  // Features
  classesPerMonth   Int?
  unlimitedClasses  Boolean @default(false)
  accessToContent   Boolean @default(true)
  personalTraining  Boolean @default(false)
  competitionAccess Boolean @default(false)

  // Odoo Integration
  odooProductId              Int?
  odooSubscriptionTemplateId Int?

  // Relations
  academy     Academy      @relation(fields: [academyId], references: [id], onDelete: Cascade)
  memberships Membership[]

  @@unique([academyId, slug])
  @@map("plans")
}

// Memberships & Payments
enum MembershipStatus {
  ACTIVE
  PAST_DUE
  CANCELED
  EXPIRED
  TRIAL
}

model Membership {
  id        String           @id @default(cuid())
  academyId String
  userId    String
  planId    String
  status    MembershipStatus @default(TRIAL)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Subscription Details
  startDate       DateTime
  endDate         DateTime?
  trialEndDate    DateTime?
  nextBillingDate DateTime?

  // Odoo Integration
  odooSubscriptionId Int?

  // Relations
  academy  Academy   @relation(fields: [academyId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan     Plan      @relation(fields: [planId], references: [id])
  payments Payment[]

  @@map("memberships")
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  CANCELED
  REFUNDED
}

enum PaymentType {
  SUBSCRIPTION
  INVOICE
  SETUP_FEE
}

enum PaymentMethod {
  CASH
  TRANSFER
}

model Payment {
  id           String         @id @default(cuid())
  academyId    String
  membershipId String?
  amount       Float
  currency     String         @default("CLP")
  status       PaymentStatus  @default(PENDING)
  type         PaymentType    @default(SUBSCRIPTION)
  method       PaymentMethod?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  // Event payment linkage (optional)
  eventId      String?
  userId       String?

  // Odoo Integration
  odooTransactionId  String?
  odooMoveId         Int?
  odooSubscriptionId Int?
  externalRef        String? @unique
  acquirerCode       String?

  // Payment Details
  paidAt        DateTime?
  failureReason String?

  // Relations
  academy    Academy     @relation(fields: [academyId], references: [id], onDelete: Cascade)
  membership Membership? @relation(fields: [membershipId], references: [id])
  event      Event?      @relation(fields: [eventId], references: [id])
  user       User?       @relation(fields: [userId], references: [id])

  @@map("payments")
}

// Curriculum & Content
model Curriculum {
  id          String   @id @default(cuid())
  academyId   String
  name        String
  description String?
  discipline  String
  level       String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  academy Academy  @relation(fields: [academyId], references: [id], onDelete: Cascade)
  modules Module[]

  @@map("curricula")
}

model Module {
  id           String   @id @default(cuid())
  curriculumId String
  name         String
  description  String?
  order        Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  curriculum Curriculum @relation(fields: [curriculumId], references: [id], onDelete: Cascade)
  units      Unit[]

  @@map("modules")
}

model Unit {
  id          String   @id @default(cuid())
  moduleId    String
  name        String
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  module     Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  techniques Technique[]

  @@map("units")
}

model Technique {
  id          String   @id @default(cuid())
  unitId      String
  name        String
  description String?
  videoUrl    String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Prerequisites
  prerequisites String[] // Array of technique IDs
  tags          String[]

  // Relations
  unit            Unit              @relation(fields: [unitId], references: [id], onDelete: Cascade)
  studentProgress StudentProgress[]

  @@map("techniques")
}

enum ContentType {
  VIDEO
  DOCUMENT
  IMAGE
  AUDIO
}

enum ContentVisibility {
  PUBLIC
  PLAN_RESTRICTED
  LEVEL_RESTRICTED
  PRIVATE
}

enum ChannelVisibility {
  PUBLIC
  STUDENTS
  COACHES
}

model Content {
  id          String            @id @default(cuid())
  academyId   String
  title       String
  description String?
  type        ContentType
  visibility  ContentVisibility @default(PLAN_RESTRICTED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // File Details
  fileUrl      String
  thumbnailUrl String?
  duration     Int? // in seconds for video/audio
  fileSize     Int? // in bytes

  // Access Control
  requiredPlans String[] // Plan IDs
  requiredLevel String?

  // Video Specific (Mux/Stream)
  muxAssetId    String?
  muxPlaybackId String?

  // Relations
  channelId String?
  channel   Channel? @relation(fields: [channelId], references: [id])
  academy   Academy  @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@map("contents")
}

model Channel {
  id          String            @id @default(cuid())
  academyId   String
  name        String
  slug        String
  visibility  ChannelVisibility @default(PUBLIC)
  description String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  // Relations
  academy  Academy   @relation(fields: [academyId], references: [id], onDelete: Cascade)
  contents Content[]

  @@unique([academyId, slug])
  @@map("channels")
}

model ContentPermission {
  id              String  @id @default(cuid())
  academyId       String
  coachId         String
  canVideo        Boolean @default(false)
  canAnnouncement Boolean @default(false)
  canDoc          Boolean @default(false)
  canLink         Boolean @default(false)
  requireApproval Boolean @default(true)
  monthlyQuota    Int?
  maxUploadMB     Int?

  // Relations
  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)
  coach   User    @relation(fields: [coachId], references: [id], onDelete: Cascade)

  @@unique([academyId, coachId])
  @@map("content_permissions")
}

// Calendar & Classes
enum ClassStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELED
}

model Class {
  id          String      @id @default(cuid())
  academyId   String
  branchId    String
  coachId     String
  title       String
  description String?
  discipline  String
  level       String
  status      ClassStatus @default(SCHEDULED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Schedule
  startTime DateTime
  endTime   DateTime

  // Capacity
  maxCapacity Int @default(20)

  // Relations
  academy     Academy      @relation(fields: [academyId], references: [id], onDelete: Cascade)
  branch      Branch       @relation(fields: [branchId], references: [id])
  coach       User         @relation("ClassCoach", fields: [coachId], references: [id])
  enrollments Enrollment[]
  attendances Attendance[]

  // Optional link to recurring schedule generation
  scheduleId String?
  schedule   ClassSchedule? @relation(fields: [scheduleId], references: [id])

  @@unique([scheduleId, startTime])
  @@map("classes")
}

// Events
enum EventType {
  CHAMPIONSHIP
  SEMINAR
  HOLIDAY
  ANNOUNCEMENT
  OTHER
}

model Event {
  id          String    @id @default(cuid())
  academyId   String
  // Multi-tenant (PR-1): optional org reference retained alongside academyId for migration
  orgId       String?
  branchId    String?
  title       String
  description String?
  type        EventType @default(OTHER)
  allDay      Boolean   @default(true)
  eventDate   DateTime
  startAt     DateTime?
  endAt       DateTime?
  published   Boolean   @default(true)
  important   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  academy       Academy             @relation(fields: [academyId], references: [id], onDelete: Cascade)
  organization  Organization?       @relation(fields: [orgId], references: [id], onDelete: SetNull)
  branch        Branch?             @relation(fields: [branchId], references: [id])
  registrations EventRegistration[]
  payments      Payment[]

  @@map("events")
}

enum EnrollmentStatus {
  ENROLLED
  WAITLIST
  CANCELED
}

model Enrollment {
  id        String           @id @default(cuid())
  classId   String
  userId    String
  branchId  String
  status    EnrollmentStatus @default(ENROLLED)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  class  Class  @relation(fields: [classId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch Branch @relation(fields: [branchId], references: [id])

  @@unique([classId, userId])
  @@map("enrollments")
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

model Attendance {
  id        String           @id @default(cuid())
  classId   String
  userId    String
  status    AttendanceStatus @default(PRESENT)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Check-in Details
  checkedInAt DateTime?
  notes       String?

  // Relations
  class Class @relation(fields: [classId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([classId, userId])
  @@map("attendances")
}

// Assessments (Optional)
model Assessment {
  id         String   @id @default(cuid())
  userId     String
  assessorId String
  title      String
  notes      String?
  score      Float?
  maxScore   Float?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Belt/Level Progression
  currentLevel String?
  newLevel     String?
  passed       Boolean @default(false)

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("assessments")
}

// KPIs & Analytics
model KpiCache {
  id        String   @id @default(cuid())
  academyId String
  metric    String // MRR, ARPU, churn_rate, etc.
  value     Float
  period    String // YYYY-MM format
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@unique([academyId, metric, period])
  @@map("kpis_cache")
}

// Audit Logs
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  PAYMENT
  ENROLLMENT
}

model AuditLog {
  id         String      @id @default(cuid())
  academyId  String
  userId     String?
  action     AuditAction
  resource   String // table name or resource type
  resourceId String? // ID of the affected resource
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime    @default(now())

  // Relations
  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)
  user    User?   @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// === Recurring schedules (minimal) ===
enum Weekday {
  MON
  TUE
  WED
  THU
  FRI
  SAT
  SUN
}

model ClassSchedule {
  id             String    @id @default(cuid())
  academyId      String
  branchId       String
  coachId        String
  title          String
  description    String?
  discipline     String
  level          String
  weekday        Weekday
  startTimeLocal String // "HH:mm"
  endTimeLocal   String // "HH:mm"
  timezone       String    @default("America/Santiago")
  active         Boolean   @default(true)
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)
  branch  Branch  @relation(fields: [branchId], references: [id])
  coach   User    @relation("ClassScheduleCoach", fields: [coachId], references: [id])
  classes Class[]

  @@map("class_schedules")
}

// === Student Progress Tracking ===
model StudentProgress {
  id          String    @id @default(cuid())
  studentId   String
  techniqueId String
  completed   Boolean   @default(false)
  score       Float?
  notes       String?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  student   User      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  technique Technique @relation(fields: [techniqueId], references: [id], onDelete: Cascade)

  @@unique([studentId, techniqueId])
  @@map("student_progress")
}

// ============================
// CLUB DEPORTIVO MODELS
// ============================

enum SportType {
  FOOTBALL
  BASKETBALL
}

// Perfil extendido para jugadores
model PlayerProfile {
  id              String @id @default(cuid())
  userId          String @unique
  position        String // Portero, Defensa, Mediocampo, Delantero (fútbol) | Base, Escolta, Alero, Ala-Pívot, Pívot (básquet)
  shirtSize       String // XS, S, M, L, XL, XXL
  preferredNumber Int?

  // Si es menor
  isMinor    Boolean @default(false)
  guardianId String?

  // Estadísticas acumuladas
  totalGoals    Int @default(0)
  totalAssists  Int @default(0)
  totalPoints   Int @default(0)
  totalRebounds Int @default(0)
  totalSteals   Int @default(0)
  totalBlocks   Int @default(0)
  yellowCards   Int @default(0)
  redCards      Int @default(0)
  fouls         Int @default(0)
  matchesPlayed Int @default(0)
  minutesPlayed Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  guardian User? @relation("GuardianOf", fields: [guardianId], references: [id])

  @@map("player_profiles")
}

// Documentos de jugadores
model PlayerDocument {
  id         String    @id @default(cuid())
  userId     String
  type       String // ID_CARD, MEDICAL_CERT, PHOTO, GUARDIAN_AUTH
  fileUrl    String
  fileName   String
  status     String    @default("PENDING") // PENDING, VERIFIED, REJECTED
  uploadedAt DateTime  @default(now())
  verifiedBy String?
  verifiedAt DateTime?
  notes      String?

  user     User  @relation("PlayerDocuments", fields: [userId], references: [id], onDelete: Cascade)
  verifier User? @relation("VerifiedDocuments", fields: [verifiedBy], references: [id])

  @@map("player_documents")
}

// Sesiones de entrenamiento
model TrainingSession {
  id        String   @id @default(cuid())
  academyId String
  date      DateTime
  startTime String? // HH:MM format
  endTime   String? // HH:MM format
  duration  Int // minutos
  location  String?
  focus     String? // e.g., "Técnica", "Táctica", "Físico"
  notes     String?
  status    String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  attendance TrainingAttendance[]
  academy    Academy              @relation(fields: [academyId], references: [id], onDelete: Cascade)

  @@map("training_sessions")
}

// Asistencia a entrenamientos (compatible con ambos sistemas)
model TrainingAttendance {
  id          String    @id @default(cuid())
  sessionId   String? // Para sistema antiguo de TrainingSession
  instanceId  String? // Para nuevo sistema de TrainingInstance
  playerId    String
  status      String    @default("PENDING") // PENDING, CONFIRMED, DECLINED, PRESENT, ABSENT, JUSTIFIED, ATTENDED
  confirmedAt DateTime?
  checkedInAt DateTime?
  notes       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  session  TrainingSession?  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  instance TrainingInstance? @relation(fields: [instanceId], references: [id], onDelete: Cascade)
  player   User              @relation("TrainingAttendance", fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([sessionId, playerId])
  @@unique([instanceId, playerId])
  @@map("training_attendance")
}

// Partidos
model Match {
  id            String    @id @default(cuid())
  academyId     String
  tournamentId  String? // Relación con torneo
  sport         SportType
  date          DateTime
  opponent      String
  location      String
  homeAway      String? // HOME, AWAY
  goalsFor      Int?
  goalsAgainst  Int?
  pointsFor     Int? // Para básquetbol
  pointsAgainst Int? // Para básquetbol
  result        String? // WIN, DRAW, LOSS
  status        String    @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, FINISHED, CANCELLED
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  callup      MatchCallup?
  stats       MatchPlayerStat[]
  evaluations PlayerEvaluation[]
  academy     Academy            @relation(fields: [academyId], references: [id], onDelete: Cascade)
  tournament  Tournament?        @relation("TournamentMatches", fields: [tournamentId], references: [id], onDelete: SetNull)

  @@index([tournamentId])
  @@map("matches")
}

// Convocatorias
model MatchCallup {
  id          String    @id @default(cuid())
  matchId     String    @unique
  formation   String? // 4-4-2, 4-3-3, etc (solo fútbol)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  match   Match               @relation(fields: [matchId], references: [id], onDelete: Cascade)
  players MatchCallupPlayer[]

  @@map("match_callups")
}

model MatchCallupPlayer {
  id        String  @id @default(cuid())
  callupId  String
  playerId  String
  type      String // STARTER, SUBSTITUTE
  confirmed Boolean @default(false)

  callup MatchCallup @relation(fields: [callupId], references: [id], onDelete: Cascade)
  player User        @relation("MatchCallups", fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([callupId, playerId])
  @@map("match_callup_players")
}

// Estadísticas de partido por jugador
model MatchPlayerStat {
  id       String @id @default(cuid())
  matchId  String
  playerId String

  // Fútbol
  goals   Int @default(0)
  assists Int @default(0)
  yellow  Int @default(0)
  red     Int @default(0)

  // Básquetbol
  points   Int @default(0)
  rebounds Int @default(0)
  steals   Int @default(0)
  blocks   Int @default(0)
  fouls    Int @default(0)

  // Común
  minutes Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  match  Match @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player User  @relation("MatchStats", fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([matchId, playerId])
  @@map("match_player_stats")
}

// Evaluaciones de jugadores
model PlayerEvaluation {
  id         String  @id @default(cuid())
  playerId   String
  coachId    String
  matchId    String?
  trainingId String?

  // Puntuaciones 1-10
  technique Int
  tactics   Int
  physical  Int
  attitude  Int

  // Comentarios
  strengths    String?
  improvements String?
  notes        String?

  createdAt DateTime @default(now())

  player User   @relation("EvaluatedPlayer", fields: [playerId], references: [id], onDelete: Cascade)
  coach  User   @relation("EvaluatingCoach", fields: [coachId], references: [id], onDelete: Cascade)
  match  Match? @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("player_evaluations")
}

// Gastos del club
model ClubExpense {
  id          String   @id @default(cuid())
  academyId   String
  concept     String
  category    String // FIELD_RENTAL, EQUIPMENT, TRANSPORTATION, BALLS, REFEREES, OTHER
  amount      Float
  currency    String   @default("CLP")
  date        DateTime
  receiptUrl  String?
  receiptName String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)
  creator User    @relation("ClubExpenses", fields: [createdBy], references: [id])

  @@map("club_expenses")
}

// Anuncios
model Announcement {
  id          String    @id @default(cuid())
  academyId   String
  title       String
  body        String
  audience    String // TEAM, CATEGORY, ALL
  publishedAt DateTime?
  createdBy   String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  academy Academy @relation(fields: [academyId], references: [id], onDelete: Cascade)
  creator User    @relation("Announcements", fields: [createdBy], references: [id])

  @@map("announcements")
}

// Metas personales
model PlayerGoal {
  id        String    @id @default(cuid())
  userId    String
  title     String
  metric    String? // goals, assists, points, rebounds, etc
  target    Float?
  dueDate   DateTime?
  status    String    @default("ACTIVE") // ACTIVE, DONE, FAILED
  progress  Float     @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation("PlayerGoals", fields: [userId], references: [id], onDelete: Cascade)

  @@map("player_goals")
}

// Sistema de insignias
model Badge {
  id          String @id @default(cuid())
  code        String @unique
  name        String
  icon        String
  description String
  ruleJson    String // JSON con reglas para otorgar

  awards UserBadge[]

  @@map("badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  awardedAt DateTime @default(now())
  reason    String?

  user  User  @relation("UserBadges", fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@map("user_badges")
}

// ============================
// SISTEMA DE TORNEOS
// ============================

model Tournament {
  id           String    @id @default(cuid())
  academyId    String
  name         String
  description  String?   @db.Text
  season       String // "2025", "2025-2026"
  type         String    @default("LEAGUE") // LEAGUE, CUP, FRIENDLY, PLAYOFF
  startDate    DateTime
  endDate      DateTime?
  rules        String?   @db.Text // Markdown o HTML
  rulesFileUrl String?
  logoUrl      String?
  status       String    @default("ACTIVE") // ACTIVE, FINISHED, CANCELLED
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  academy   Academy              @relation("AcademyTournaments", fields: [academyId], references: [id], onDelete: Cascade)
  matches   Match[]              @relation("TournamentMatches")
  standings TournamentStanding[]

  @@map("tournaments")
}

model TournamentStanding {
  id           String @id @default(cuid())
  tournamentId String
  teamName     String // Puede ser el nombre de la academia o equipo rival
  played       Int    @default(0)
  won          Int    @default(0)
  drawn        Int    @default(0)
  lost         Int    @default(0)
  goalsFor     Int    @default(0)
  goalsAgainst Int    @default(0)
  goalDiff     Int    @default(0)
  points       Int    @default(0)
  position     Int?

  tournament Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)

  @@unique([tournamentId, teamName])
  @@map("tournament_standings")
}

// ============================
// SISTEMA DE ENTRENAMIENTOS
// ============================

model TrainingSchedule {
  id        String    @id @default(cuid())
  academyId String
  dayOfWeek Int // 0=Domingo, 1=Lunes, ..., 6=Sábado
  startTime String // "18:00"
  endTime   String // "20:00"
  location  String
  type      String? // TECHNICAL, PHYSICAL, TACTICAL, GAME
  category  String? // Sub-15, Senior, etc
  startDate DateTime // Desde cuándo aplica
  endDate   DateTime? // Hasta cuándo (null = indefinido)
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  academy   Academy            @relation("AcademyTrainingSchedules", fields: [academyId], references: [id], onDelete: Cascade)
  instances TrainingInstance[]

  @@map("training_schedules")
}

model TrainingInstance {
  id         String   @id @default(cuid())
  scheduleId String? // null si es entrenamiento único
  academyId  String
  date       DateTime
  startTime  String
  endTime    String
  location   String
  type       String?
  category   String?
  status     String   @default("SCHEDULED") // SCHEDULED, COMPLETED, CANCELLED
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  schedule   TrainingSchedule?    @relation(fields: [scheduleId], references: [id], onDelete: SetNull)
  academy    Academy              @relation("AcademyTrainingInstances", fields: [academyId], references: [id], onDelete: Cascade)
  attendance TrainingAttendance[]

  @@index([academyId, date])
  @@map("training_instances")
}
